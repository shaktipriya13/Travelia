:root {
    /**
     * COLORS
     */
    /* background colors */
    --bg-white: hsl(0, 0%, 100%);
    --bg-black-alpha-20: hsla(0, 0%, 0%, 0.2);
    --bg-lavender-blush: hsl(0, 100%, 98%);
    --bg-majorelle-blue: hsl(249, 95%, 63%);
    --bg-ocean-blue: hsl(249, 63%, 54%);
    --bg-majorelle-blue-alpha-5: hsla(249, 95%, 63%, 0.05);
    --bg-misty-rose: hsl(0, 100%, 95%);
    --bg-red-salsa: hsl(357, 94%, 63%);
    --bg-red-salsa-alpha-5: hsla(357, 94%, 63%, 0.05);
    --bg-english-vermilion: hsl(357, 64%, 53%);
    --bg-chrome-yellow-alpha-5: hsla(40, 100%, 50%, 0.05);
    --bg-sunglow-alpha-10: hsla(48, 100%, 50%, 0.1);
    --bg-gainsboro: hsl(0, 0%, 85%);

    /* text color */
    --text-white: hsl(0, 0%, 100%);
    --text-gunmetal: hsl(209, 40%, 14%);
    --text-light-coral: hsl(357, 96%, 73%);
    --text-granite-gray: hsl(210, 4%, 38%);
    --text-majorelle-blue: hsl(249, 95%, 63%);
    --text-sunglow: hsl(48, 100%, 50%);

    /* border color */
    --border-gainsboro: hsl(0, 1%, 85%);

    /**
   * TYPOGRAPHY
   */
    /* font family */
    --ff-poppins: 'Poppins', sans-serif;

    /* font size */
    --fontSize-1: 4.2rem;
    --fontSize-2: 3.6rem;
    --fontSize-3: 2.5rem;
    --fontSize-4: 2.4rem;
    --fontSize-5: 2rem;
    --fontSize-6: 1.6rem;
    --fontSize-7: 1.5rem;

    /* font-weight */
    --weight-bold: 700;
    --weight-semiBold: 600;
    --weight-medium: 500;

    /**
   * SPACING
   */
    --section-spacing: 80px;

    /**
   * BOX SHADOW
   */
    --shadow-1: 0 2px 10px hsla(209, 40%, 14%, 10%);
    --shadow-2: 0 5px 10px hsla(249, 95%, 63%, 25%);
    --shadow-3: 0 5px 10px hsla(357, 64%, 53%, 25%);
    --shadow-4: 0 30px 50px hsla(357, 64%, 53%, 30%);

    /* Radius */
    --radius-pill: 200px;
    --radius-circle: 50%;
    --radius-30: 30px;
    --radius-20: 20px;

    /* Transition */
    --transition-1: 250ms ease;
    --transition-2: 500ms ease;
    --cubic-out: cubic-bezier(0.05, 0.83, 0.52, 0.97);


}

/* RESET the browser to default style */
*,
*::before,
*::after{
    margin:0;
    padding:0;
    box-sizing: border-box;
}

li {list-style:none;}

a,
img,
span,
input,
button,
ion-icon {display: block;}
/* By default, most of these elements are inline or inline-block because they are designed to flow naturally with text. However, in modern layouts, especially when designing for responsive UIs, you may want to make them block for:

Block elements can have predictable behaviors (e.g., they occupy the full width of their container). 

For example, in navigation menus or forms, you may want these elements to stack vertically, and block makes that easier.*/

a{
    color: inherit;
    /* Ensures the link (<a>) inherits the color of its parent element instead of default blue. */
    text-decoration: none;
}

input,
button{
    background: none;
    border: none;
    font: inherit;
}

input{
    width: 100%;
    outline: none;
}

button {cursor: pointer;}

ion-icon {pointer-events: none;}

address {font-style: normal;}
/* by default addr ka font style is italic */

html{
    font-family: var(--ff-poppins);
    font-size: 10px;
    scroll-behavior: smooth;
    /* Instead of a jarring "jump" to the target, it scrolls smoothly. */
}

body{
    background-color: var(--bg-lavender-blush);
    color:var(--text-granite-gray);
    font-size: var(--fontSize-6);
    line-height: 1.8;
}

/*  PRELOADER  */
.preloader{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--bg-lavender-blush);
    display: grid;
    /* Grid adapts seamlessly to various screen sizes, making it perfect for modern web layouts. */
    place-content: center;
    z-index: 6;
    transition: var(--transition-1);
}

.preloader.remove{
    visibility: hidden;
    opacity: 0;
}
.preloader.img{
    animation: bounce 800ms ease-in-out infinite alternate;
}
@keyframes bounce{
    0% {transform: translateY(-10px);}
    100% {transform: translateY(0);}
}
/* This animation creates a simple bounce effect where the element:
Moves up by 10 pixels at the start.
Gradually returns to its original position.

Keyframes in CSS define the intermediate steps in an animation, specifying how an element's properties should change at various points during the animation. They are used with the @keyframes rule to create smooth, step-by-step transitions between defined states over time.*/

.preloader-inner{
    position: relative;
}
.preloader-inner::after{
    content: "";
    position: absolute;
    bottom:-10px;
    left: 50%;
    transform: translateX(-50%);
    width: 80%;
    height: 10px;
    background-color: var(--bg-black-alpha-20);
    filter: blur(4px);
    z-index: -1;
    animation: dropShadow 800ms ease-in-out infinite alternate;
    /*
    The z-index is a CSS property that controls the stacking order of elements on a webpage. Elements with a higher z-index will appear in front of elements with a lower z-index, allowing you to layer content on top of each other.

Higher z-index = Element appears in front.
Lower z-index = Element appears behind.
    */
}
@keyframes dropShadow{
    0% {width: 40%;}
    100% {width: 80%;}
}